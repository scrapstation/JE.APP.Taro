/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class AccountClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4888";
    }

    getAccountInfo(  cancelToken?: CancelToken | undefined): Promise<AccountInfoResponse> {
        let url_ = this.baseUrl + "/api/Account";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAccountInfo(_response);
        });
    }

    protected processGetAccountInfo(response: AxiosResponse): Promise<AccountInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AccountInfoResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountInfoResponse>(<any>null);
    }
}

export class AuthClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4888";
    }

    auth(model: GetWechatUserInfo , cancelToken?: CancelToken | undefined): Promise<WechatAuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuth(_response);
        });
    }

    protected processAuth(response: AxiosResponse): Promise<WechatAuthResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WechatAuthResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WechatAuthResponse>(<any>null);
    }
}

export class CategoryClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4888";
    }

    getAllCategory(  cancelToken?: CancelToken | undefined): Promise<CategoryReponse[]> {
        let url_ = this.baseUrl + "/api/Category/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllCategory(_response);
        });
    }

    protected processGetAllCategory(response: AxiosResponse): Promise<CategoryReponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryReponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CategoryReponse[]>(<any>null);
    }
}

export class ConsigneeClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4888";
    }

    create(req: CreateConsigneeRequest , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Consignee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    modify(req: ModifyConsigneeRequest , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Consignee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModify(_response);
        });
    }

    protected processModify(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    delete(consigneeId: string | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Consignee?";
        if (consigneeId === null)
            throw new Error("The parameter 'consigneeId' cannot be null.");
        else if (consigneeId !== undefined)
            url_ += "consigneeId=" + encodeURIComponent("" + consigneeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    getAll(  cancelToken?: CancelToken | undefined): Promise<ConsigneeItemResponse[]> {
        let url_ = this.baseUrl + "/api/Consignee/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<ConsigneeItemResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ConsigneeItemResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsigneeItemResponse[]>(<any>null);
    }

    getById(consigneeId: string , cancelToken?: CancelToken | undefined): Promise<ConsigneeItemResponse> {
        let url_ = this.baseUrl + "/api/Consignee/{consigneeId}";
        if (consigneeId === undefined || consigneeId === null)
            throw new Error("The parameter 'consigneeId' must be defined.");
        url_ = url_.replace("{consigneeId}", encodeURIComponent("" + consigneeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<ConsigneeItemResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsigneeItemResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsigneeItemResponse>(<any>null);
    }

    getRecommended(  cancelToken?: CancelToken | undefined): Promise<ConsigneeItemResponse> {
        let url_ = this.baseUrl + "/api/Consignee/recommended";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRecommended(_response);
        });
    }

    protected processGetRecommended(response: AxiosResponse): Promise<ConsigneeItemResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsigneeItemResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsigneeItemResponse>(<any>null);
    }
}

export class OrderClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4888";
    }

    search(request: SearchOrderRequest , cancelToken?: CancelToken | undefined): Promise<PagedResultOfSearchOrderResponse> {
        let url_ = this.baseUrl + "/api/Order/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSearch(_response);
        });
    }

    protected processSearch(response: AxiosResponse): Promise<PagedResultOfSearchOrderResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedResultOfSearchOrderResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultOfSearchOrderResponse>(<any>null);
    }

    create(req: CreateOrderRequest , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    cancel(orderId: string | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Order?";
        if (orderId === null)
            throw new Error("The parameter 'orderId' cannot be null.");
        else if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCancel(_response);
        });
    }

    protected processCancel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    pay(orderId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PaymentResponse> {
        let url_ = this.baseUrl + "/api/Order/pay?";
        if (orderId === null)
            throw new Error("The parameter 'orderId' cannot be null.");
        else if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPay(_response);
        });
    }

    protected processPay(response: AxiosResponse): Promise<PaymentResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaymentResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentResponse>(<any>null);
    }

    notify(request: TransactionNotifyRequest , cancelToken?: CancelToken | undefined): Promise<WechatTransactionResponse> {
        let url_ = this.baseUrl + "/api/Order/notify";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNotify(_response);
        });
    }

    protected processNotify(response: AxiosResponse): Promise<WechatTransactionResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WechatTransactionResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WechatTransactionResponse>(<any>null);
    }
}

export class RiderClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4888";
    }

    getDeliverySummary(  cancelToken?: CancelToken | undefined): Promise<RiderGetDeliverySummaryResponse> {
        let url_ = this.baseUrl + "/api/Rider/delivery_summary";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDeliverySummary(_response);
        });
    }

    protected processGetDeliverySummary(response: AxiosResponse): Promise<RiderGetDeliverySummaryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RiderGetDeliverySummaryResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RiderGetDeliverySummaryResponse>(<any>null);
    }

    taskOrder(orderId: string | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Rider/task_order?";
        if (orderId === null)
            throw new Error("The parameter 'orderId' cannot be null.");
        else if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTaskOrder(_response);
        });
    }

    protected processTaskOrder(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    complateDelivery(deliveryId: string | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Rider/complate_delivery?";
        if (deliveryId === null)
            throw new Error("The parameter 'deliveryId' cannot be null.");
        else if (deliveryId !== undefined)
            url_ += "deliveryId=" + encodeURIComponent("" + deliveryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processComplateDelivery(_response);
        });
    }

    protected processComplateDelivery(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    searchDelivery(req: SearchRiderDeliveryTaskRequest , cancelToken?: CancelToken | undefined): Promise<PagedResultOfSearchRiderDeliveryTaskResponse> {
        let url_ = this.baseUrl + "/api/Rider/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSearchDelivery(_response);
        });
    }

    protected processSearchDelivery(response: AxiosResponse): Promise<PagedResultOfSearchRiderDeliveryTaskResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedResultOfSearchRiderDeliveryTaskResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultOfSearchRiderDeliveryTaskResponse>(<any>null);
    }

    updateLocation(latitude: number | undefined, longitude: number | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Rider?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "latitude=" + encodeURIComponent("" + latitude) + "&";
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "longitude=" + encodeURIComponent("" + longitude) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateLocation(_response);
        });
    }

    protected processUpdateLocation(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class ShoppingCartClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4888";
    }

    get(  cancelToken?: CancelToken | undefined): Promise<ShoppingCartInfoResponse> {
        let url_ = this.baseUrl + "/api/ShoppingCart";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<ShoppingCartInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCartInfoResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCartInfoResponse>(<any>null);
    }

    modifyItem(req: ModifyShoppingCartItemRequest , cancelToken?: CancelToken | undefined): Promise<ShoppingCartInfoResponse> {
        let url_ = this.baseUrl + "/api/ShoppingCart";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModifyItem(_response);
        });
    }

    protected processModifyItem(response: AxiosResponse): Promise<ShoppingCartInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShoppingCartInfoResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShoppingCartInfoResponse>(<any>null);
    }
}

export class AccountInfoResponse implements IAccountInfoResponse {
    nickName?: string | undefined;
    avator?: string | undefined;
    phoneNumber?: string | undefined;
    couponCount!: number;
    balance!: number;
    points!: number;
    isRider!: boolean;

    constructor(data?: IAccountInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nickName = _data["nickName"];
            this.avator = _data["avator"];
            this.phoneNumber = _data["phoneNumber"];
            this.couponCount = _data["couponCount"];
            this.balance = _data["balance"];
            this.points = _data["points"];
            this.isRider = _data["isRider"];
        }
    }

    static fromJS(data: any): AccountInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nickName"] = this.nickName;
        data["avator"] = this.avator;
        data["phoneNumber"] = this.phoneNumber;
        data["couponCount"] = this.couponCount;
        data["balance"] = this.balance;
        data["points"] = this.points;
        data["isRider"] = this.isRider;
        return data; 
    }
}

export interface IAccountInfoResponse {
    nickName?: string | undefined;
    avator?: string | undefined;
    phoneNumber?: string | undefined;
    couponCount: number;
    balance: number;
    points: number;
    isRider: boolean;
}

export class WechatAuthResponse implements IWechatAuthResponse {
    isSuccessful!: boolean;
    msg?: string | undefined;
    token?: string | undefined;
    expiration?: Date | undefined;

    constructor(data?: IWechatAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccessful = _data["isSuccessful"];
            this.msg = _data["msg"];
            this.token = _data["token"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): WechatAuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WechatAuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccessful"] = this.isSuccessful;
        data["msg"] = this.msg;
        data["token"] = this.token;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IWechatAuthResponse {
    isSuccessful: boolean;
    msg?: string | undefined;
    token?: string | undefined;
    expiration?: Date | undefined;
}

export class GetWechatUserInfo implements IGetWechatUserInfo {
    code?: string | undefined;
    rawData?: string | undefined;
    signature?: string | undefined;

    constructor(data?: IGetWechatUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.rawData = _data["rawData"];
            this.signature = _data["signature"];
        }
    }

    static fromJS(data: any): GetWechatUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GetWechatUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["rawData"] = this.rawData;
        data["signature"] = this.signature;
        return data; 
    }
}

export interface IGetWechatUserInfo {
    code?: string | undefined;
    rawData?: string | undefined;
    signature?: string | undefined;
}

export class CategoryReponse implements ICategoryReponse {
    id!: string;
    name?: string | undefined;
    products?: ProductReponse[] | undefined;

    constructor(data?: ICategoryReponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(ProductReponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryReponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryReponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategoryReponse {
    id: string;
    name?: string | undefined;
    products?: ProductReponse[] | undefined;
}

export class ProductReponse implements IProductReponse {
    id!: string;
    name?: string | undefined;
    price!: number;
    imgUrl?: string | undefined;
    description?: string | undefined;
    isMultiSku!: boolean;
    attributes?: AttributeResponse[] | undefined;
    skus?: SkuReponse[] | undefined;

    constructor(data?: IProductReponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.imgUrl = _data["imgUrl"];
            this.description = _data["description"];
            this.isMultiSku = _data["isMultiSku"];
            if (Array.isArray(_data["attributes"])) {
                this.attributes = [] as any;
                for (let item of _data["attributes"])
                    this.attributes!.push(AttributeResponse.fromJS(item));
            }
            if (Array.isArray(_data["skus"])) {
                this.skus = [] as any;
                for (let item of _data["skus"])
                    this.skus!.push(SkuReponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductReponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductReponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        data["imgUrl"] = this.imgUrl;
        data["description"] = this.description;
        data["isMultiSku"] = this.isMultiSku;
        if (Array.isArray(this.attributes)) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        if (Array.isArray(this.skus)) {
            data["skus"] = [];
            for (let item of this.skus)
                data["skus"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductReponse {
    id: string;
    name?: string | undefined;
    price: number;
    imgUrl?: string | undefined;
    description?: string | undefined;
    isMultiSku: boolean;
    attributes?: AttributeResponse[] | undefined;
    skus?: SkuReponse[] | undefined;
}

export class AttributeResponse implements IAttributeResponse {
    id!: string;
    name?: string | undefined;
    attributeItems?: AttributeItemResponse[] | undefined;

    constructor(data?: IAttributeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["attributeItems"])) {
                this.attributeItems = [] as any;
                for (let item of _data["attributeItems"])
                    this.attributeItems!.push(AttributeItemResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AttributeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.attributeItems)) {
            data["attributeItems"] = [];
            for (let item of this.attributeItems)
                data["attributeItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAttributeResponse {
    id: string;
    name?: string | undefined;
    attributeItems?: AttributeItemResponse[] | undefined;
}

export class AttributeItemResponse implements IAttributeItemResponse {
    id!: string;
    name?: string | undefined;

    constructor(data?: IAttributeItemResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AttributeItemResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeItemResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IAttributeItemResponse {
    id: string;
    name?: string | undefined;
}

export class SkuReponse implements ISkuReponse {
    id!: string;
    price!: number;
    inventory!: number;
    attributeItemIds?: string[] | undefined;

    constructor(data?: ISkuReponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.price = _data["price"];
            this.inventory = _data["inventory"];
            if (Array.isArray(_data["attributeItemIds"])) {
                this.attributeItemIds = [] as any;
                for (let item of _data["attributeItemIds"])
                    this.attributeItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SkuReponse {
        data = typeof data === 'object' ? data : {};
        let result = new SkuReponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["price"] = this.price;
        data["inventory"] = this.inventory;
        if (Array.isArray(this.attributeItemIds)) {
            data["attributeItemIds"] = [];
            for (let item of this.attributeItemIds)
                data["attributeItemIds"].push(item);
        }
        return data; 
    }
}

export interface ISkuReponse {
    id: string;
    price: number;
    inventory: number;
    attributeItemIds?: string[] | undefined;
}

export class CreateConsigneeRequest implements ICreateConsigneeRequest {
    latitude!: number;
    longitude!: number;
    name?: string | undefined;
    mobile?: string | undefined;
    simpleAddress?: string | undefined;
    fullAddress?: string | undefined;
    houseNumber?: string | undefined;
    isDefault!: boolean;

    constructor(data?: ICreateConsigneeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.name = _data["name"];
            this.mobile = _data["mobile"];
            this.simpleAddress = _data["simpleAddress"];
            this.fullAddress = _data["fullAddress"];
            this.houseNumber = _data["houseNumber"];
            this.isDefault = _data["isDefault"];
        }
    }

    static fromJS(data: any): CreateConsigneeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateConsigneeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["name"] = this.name;
        data["mobile"] = this.mobile;
        data["simpleAddress"] = this.simpleAddress;
        data["fullAddress"] = this.fullAddress;
        data["houseNumber"] = this.houseNumber;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface ICreateConsigneeRequest {
    latitude: number;
    longitude: number;
    name?: string | undefined;
    mobile?: string | undefined;
    simpleAddress?: string | undefined;
    fullAddress?: string | undefined;
    houseNumber?: string | undefined;
    isDefault: boolean;
}

export class ModifyConsigneeRequest extends CreateConsigneeRequest implements IModifyConsigneeRequest {
    id!: string;

    constructor(data?: IModifyConsigneeRequest) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ModifyConsigneeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ModifyConsigneeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IModifyConsigneeRequest extends ICreateConsigneeRequest {
    id: string;
}

export class ConsigneeItemResponse extends CreateConsigneeRequest implements IConsigneeItemResponse {
    id!: string;

    constructor(data?: IConsigneeItemResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ConsigneeItemResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConsigneeItemResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IConsigneeItemResponse extends ICreateConsigneeRequest {
    id: string;
}

export class PagedResultOfSearchOrderResponse implements IPagedResultOfSearchOrderResponse {
    list?: SearchOrderResponse[] | undefined;
    pageSize!: number;
    pageIndex!: number;
    recordCount!: number;
    pageCount!: number;

    constructor(data?: IPagedResultOfSearchOrderResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["list"])) {
                this.list = [] as any;
                for (let item of _data["list"])
                    this.list!.push(SearchOrderResponse.fromJS(item));
            }
            this.pageSize = _data["pageSize"];
            this.pageIndex = _data["pageIndex"];
            this.recordCount = _data["recordCount"];
            this.pageCount = _data["pageCount"];
        }
    }

    static fromJS(data: any): PagedResultOfSearchOrderResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfSearchOrderResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.list)) {
            data["list"] = [];
            for (let item of this.list)
                data["list"].push(item.toJSON());
        }
        data["pageSize"] = this.pageSize;
        data["pageIndex"] = this.pageIndex;
        data["recordCount"] = this.recordCount;
        data["pageCount"] = this.pageCount;
        return data; 
    }
}

export interface IPagedResultOfSearchOrderResponse {
    list?: SearchOrderResponse[] | undefined;
    pageSize: number;
    pageIndex: number;
    recordCount: number;
    pageCount: number;
}

export class AuditFields implements IAuditFields {
    createdOn?: Date | undefined;
    lastModifiedOn?: Date | undefined;

    constructor(data?: IAuditFields) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.lastModifiedOn = _data["lastModifiedOn"] ? new Date(_data["lastModifiedOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditFields {
        data = typeof data === 'object' ? data : {};
        let result = new AuditFields();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["lastModifiedOn"] = this.lastModifiedOn ? this.lastModifiedOn.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAuditFields {
    createdOn?: Date | undefined;
    lastModifiedOn?: Date | undefined;
}

export class SearchOrderResponse extends AuditFields implements ISearchOrderResponse {
    id!: string;
    externalId?: string | undefined;
    amount!: number;
    actualPayment!: number;
    status!: OrderStatusEnum;
    packageStatus?: PackageStatusEnum | undefined;
    deliveryStatus?: DeliveryStatusEnum | undefined;
    paymentStatus!: PaymentStatusEnum;
    refundStatus?: RefundStatusEnum | undefined;
    orderItems?: OrderItemVo[] | undefined;

    constructor(data?: ISearchOrderResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.externalId = _data["externalId"];
            this.amount = _data["amount"];
            this.actualPayment = _data["actualPayment"];
            this.status = _data["status"];
            this.packageStatus = _data["packageStatus"];
            this.deliveryStatus = _data["deliveryStatus"];
            this.paymentStatus = _data["paymentStatus"];
            this.refundStatus = _data["refundStatus"];
            if (Array.isArray(_data["orderItems"])) {
                this.orderItems = [] as any;
                for (let item of _data["orderItems"])
                    this.orderItems!.push(OrderItemVo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchOrderResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchOrderResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["externalId"] = this.externalId;
        data["amount"] = this.amount;
        data["actualPayment"] = this.actualPayment;
        data["status"] = this.status;
        data["packageStatus"] = this.packageStatus;
        data["deliveryStatus"] = this.deliveryStatus;
        data["paymentStatus"] = this.paymentStatus;
        data["refundStatus"] = this.refundStatus;
        if (Array.isArray(this.orderItems)) {
            data["orderItems"] = [];
            for (let item of this.orderItems)
                data["orderItems"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchOrderResponse extends IAuditFields {
    id: string;
    externalId?: string | undefined;
    amount: number;
    actualPayment: number;
    status: OrderStatusEnum;
    packageStatus?: PackageStatusEnum | undefined;
    deliveryStatus?: DeliveryStatusEnum | undefined;
    paymentStatus: PaymentStatusEnum;
    refundStatus?: RefundStatusEnum | undefined;
    orderItems?: OrderItemVo[] | undefined;
}

export enum OrderStatusEnum {
    InPayment = "InPayment",
    InPackage = "InPackage",
    InDelivery = "InDelivery",
    InRefund = "InRefund",
    Canceled = "Canceled",
    Completed = "Completed",
}

export enum PackageStatusEnum {
    PenddingPackage = "PenddingPackage",
    InPacking = "InPacking",
    CompletedPackage = "CompletedPackage",
}

export enum DeliveryStatusEnum {
    PenddingDelivery = "PenddingDelivery",
    InDelivery = "InDelivery",
    CompletedDelivery = "CompletedDelivery",
}

export enum PaymentStatusEnum {
    PenddingPayment = "PenddingPayment",
    ExpiredPayment = "ExpiredPayment",
    CanceldPayment = "CanceldPayment",
    CompletedPayment = "CompletedPayment",
}

export enum RefundStatusEnum {
    PenddingRefund = "PenddingRefund",
    RefusedRefund = "RefusedRefund",
    CompleteRefund = "CompleteRefund",
}

export class OrderItemVo implements IOrderItemVo {
    snapshotName?: string | undefined;
    imgUrl?: string | undefined;

    constructor(data?: IOrderItemVo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.snapshotName = _data["snapshotName"];
            this.imgUrl = _data["imgUrl"];
        }
    }

    static fromJS(data: any): OrderItemVo {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItemVo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["snapshotName"] = this.snapshotName;
        data["imgUrl"] = this.imgUrl;
        return data; 
    }
}

export interface IOrderItemVo {
    snapshotName?: string | undefined;
    imgUrl?: string | undefined;
}

export class QueryModel implements IQueryModel {
    pageIndex!: number;
    pageSize!: number;
    sorts?: Sort[] | undefined;
    filters?: Filter[] | undefined;

    constructor(data?: IQueryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            if (Array.isArray(_data["sorts"])) {
                this.sorts = [] as any;
                for (let item of _data["sorts"])
                    this.sorts!.push(Sort.fromJS(item));
            }
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(Filter.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryModel {
        data = typeof data === 'object' ? data : {};
        let result = new QueryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        if (Array.isArray(this.sorts)) {
            data["sorts"] = [];
            for (let item of this.sorts)
                data["sorts"].push(item.toJSON());
        }
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IQueryModel {
    pageIndex: number;
    pageSize: number;
    sorts?: Sort[] | undefined;
    filters?: Filter[] | undefined;
}

export class SearchOrderRequest extends QueryModel implements ISearchOrderRequest {
    keyword?: string | undefined;

    constructor(data?: ISearchOrderRequest) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.keyword = _data["keyword"];
        }
    }

    static fromJS(data: any): SearchOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SearchOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyword"] = this.keyword;
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchOrderRequest extends IQueryModel {
    keyword?: string | undefined;
}

export class Sort implements ISort {
    field?: string | undefined;
    desc!: boolean;

    constructor(data?: ISort) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.desc = _data["desc"];
        }
    }

    static fromJS(data: any): Sort {
        data = typeof data === 'object' ? data : {};
        let result = new Sort();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["desc"] = this.desc;
        return data; 
    }
}

export interface ISort {
    field?: string | undefined;
    desc: boolean;
}

export class Filter implements IFilter {
    field?: string | undefined;
    value?: any | undefined;

    constructor(data?: IFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Filter {
        data = typeof data === 'object' ? data : {};
        let result = new Filter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["value"] = this.value;
        return data; 
    }
}

export interface IFilter {
    field?: string | undefined;
    value?: any | undefined;
}

export class CreateOrderRequest implements ICreateOrderRequest {
    createOrderItems?: CreateOrderItem[] | undefined;
    consigneeId!: string;
    remark?: string | undefined;

    constructor(data?: ICreateOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["createOrderItems"])) {
                this.createOrderItems = [] as any;
                for (let item of _data["createOrderItems"])
                    this.createOrderItems!.push(CreateOrderItem.fromJS(item));
            }
            this.consigneeId = _data["consigneeId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CreateOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.createOrderItems)) {
            data["createOrderItems"] = [];
            for (let item of this.createOrderItems)
                data["createOrderItems"].push(item.toJSON());
        }
        data["consigneeId"] = this.consigneeId;
        data["remark"] = this.remark;
        return data; 
    }
}

export interface ICreateOrderRequest {
    createOrderItems?: CreateOrderItem[] | undefined;
    consigneeId: string;
    remark?: string | undefined;
}

export class CreateOrderItem implements ICreateOrderItem {
    skuId!: string;
    quantity!: number;

    constructor(data?: ICreateOrderItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.skuId = _data["skuId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): CreateOrderItem {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["skuId"] = this.skuId;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface ICreateOrderItem {
    skuId: string;
    quantity: number;
}

export class PaymentResponse implements IPaymentResponse {
    orderId!: string;
    timeStamp?: string | undefined;
    nonceStr?: string | undefined;
    package?: string | undefined;
    signType?: string | undefined;
    paySign?: string | undefined;

    constructor(data?: IPaymentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.timeStamp = _data["timeStamp"];
            this.nonceStr = _data["nonceStr"];
            this.package = _data["package"];
            this.signType = _data["signType"];
            this.paySign = _data["paySign"];
        }
    }

    static fromJS(data: any): PaymentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["timeStamp"] = this.timeStamp;
        data["nonceStr"] = this.nonceStr;
        data["package"] = this.package;
        data["signType"] = this.signType;
        data["paySign"] = this.paySign;
        return data; 
    }
}

export interface IPaymentResponse {
    orderId: string;
    timeStamp?: string | undefined;
    nonceStr?: string | undefined;
    package?: string | undefined;
    signType?: string | undefined;
    paySign?: string | undefined;
}

export class WechatTransactionResponse implements IWechatTransactionResponse {
    code!: CodeEnum;
    message?: string | undefined;

    constructor(data?: IWechatTransactionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): WechatTransactionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WechatTransactionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IWechatTransactionResponse {
    code: CodeEnum;
    message?: string | undefined;
}

export enum CodeEnum {
    SUCCESS = "SUCCESS",
    FAILURE = "FAILURE",
}

export class TransactionNotifyRequest implements ITransactionNotifyRequest {
    id?: string | undefined;
    create_time!: Date;
    resource_type?: string | undefined;
    event_type?: string | undefined;
    resource?: TransactionNotifyResource | undefined;
    summary?: string | undefined;

    constructor(data?: ITransactionNotifyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.create_time = _data["create_time"] ? new Date(_data["create_time"].toString()) : <any>undefined;
            this.resource_type = _data["resource_type"];
            this.event_type = _data["event_type"];
            this.resource = _data["resource"] ? TransactionNotifyResource.fromJS(_data["resource"]) : <any>undefined;
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): TransactionNotifyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionNotifyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["create_time"] = this.create_time ? this.create_time.toISOString() : <any>undefined;
        data["resource_type"] = this.resource_type;
        data["event_type"] = this.event_type;
        data["resource"] = this.resource ? this.resource.toJSON() : <any>undefined;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface ITransactionNotifyRequest {
    id?: string | undefined;
    create_time: Date;
    resource_type?: string | undefined;
    event_type?: string | undefined;
    resource?: TransactionNotifyResource | undefined;
    summary?: string | undefined;
}

export class TransactionNotifyResource implements ITransactionNotifyResource {
    algorithm?: string | undefined;
    ciphertext?: string | undefined;
    associated_data?: string | undefined;
    original_type?: string | undefined;
    nonce?: string | undefined;

    constructor(data?: ITransactionNotifyResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.algorithm = _data["algorithm"];
            this.ciphertext = _data["ciphertext"];
            this.associated_data = _data["associated_data"];
            this.original_type = _data["original_type"];
            this.nonce = _data["nonce"];
        }
    }

    static fromJS(data: any): TransactionNotifyResource {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionNotifyResource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["algorithm"] = this.algorithm;
        data["ciphertext"] = this.ciphertext;
        data["associated_data"] = this.associated_data;
        data["original_type"] = this.original_type;
        data["nonce"] = this.nonce;
        return data; 
    }
}

export interface ITransactionNotifyResource {
    algorithm?: string | undefined;
    ciphertext?: string | undefined;
    associated_data?: string | undefined;
    original_type?: string | undefined;
    nonce?: string | undefined;
}

export class RiderGetDeliverySummaryResponse extends AuditFields implements IRiderGetDeliverySummaryResponse {
    inPackagingCount!: number;
    paddingDeliveryCount!: number;
    myTodayDeliveryCount!: number;

    constructor(data?: IRiderGetDeliverySummaryResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inPackagingCount = _data["inPackagingCount"];
            this.paddingDeliveryCount = _data["paddingDeliveryCount"];
            this.myTodayDeliveryCount = _data["myTodayDeliveryCount"];
        }
    }

    static fromJS(data: any): RiderGetDeliverySummaryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RiderGetDeliverySummaryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inPackagingCount"] = this.inPackagingCount;
        data["paddingDeliveryCount"] = this.paddingDeliveryCount;
        data["myTodayDeliveryCount"] = this.myTodayDeliveryCount;
        super.toJSON(data);
        return data; 
    }
}

export interface IRiderGetDeliverySummaryResponse extends IAuditFields {
    inPackagingCount: number;
    paddingDeliveryCount: number;
    myTodayDeliveryCount: number;
}

export class PagedResultOfSearchRiderDeliveryTaskResponse implements IPagedResultOfSearchRiderDeliveryTaskResponse {
    list?: SearchRiderDeliveryTaskResponse[] | undefined;
    pageSize!: number;
    pageIndex!: number;
    recordCount!: number;
    pageCount!: number;

    constructor(data?: IPagedResultOfSearchRiderDeliveryTaskResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["list"])) {
                this.list = [] as any;
                for (let item of _data["list"])
                    this.list!.push(SearchRiderDeliveryTaskResponse.fromJS(item));
            }
            this.pageSize = _data["pageSize"];
            this.pageIndex = _data["pageIndex"];
            this.recordCount = _data["recordCount"];
            this.pageCount = _data["pageCount"];
        }
    }

    static fromJS(data: any): PagedResultOfSearchRiderDeliveryTaskResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfSearchRiderDeliveryTaskResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.list)) {
            data["list"] = [];
            for (let item of this.list)
                data["list"].push(item.toJSON());
        }
        data["pageSize"] = this.pageSize;
        data["pageIndex"] = this.pageIndex;
        data["recordCount"] = this.recordCount;
        data["pageCount"] = this.pageCount;
        return data; 
    }
}

export interface IPagedResultOfSearchRiderDeliveryTaskResponse {
    list?: SearchRiderDeliveryTaskResponse[] | undefined;
    pageSize: number;
    pageIndex: number;
    recordCount: number;
    pageCount: number;
}

export class SearchRiderDeliveryTaskResponse implements ISearchRiderDeliveryTaskResponse {
    id!: string;
    orderId!: string;
    deliveryStatus!: DeliveryStatusEnum;
    name?: string | undefined;
    mobile?: string | undefined;
    avator?: string | undefined;
    simpleAddress?: string | undefined;
    fullAddress?: string | undefined;
    houseNumber?: string | undefined;
    latitude!: number;
    longitude!: number;

    constructor(data?: ISearchRiderDeliveryTaskResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderId = _data["orderId"];
            this.deliveryStatus = _data["deliveryStatus"];
            this.name = _data["name"];
            this.mobile = _data["mobile"];
            this.avator = _data["avator"];
            this.simpleAddress = _data["simpleAddress"];
            this.fullAddress = _data["fullAddress"];
            this.houseNumber = _data["houseNumber"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): SearchRiderDeliveryTaskResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchRiderDeliveryTaskResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderId"] = this.orderId;
        data["deliveryStatus"] = this.deliveryStatus;
        data["name"] = this.name;
        data["mobile"] = this.mobile;
        data["avator"] = this.avator;
        data["simpleAddress"] = this.simpleAddress;
        data["fullAddress"] = this.fullAddress;
        data["houseNumber"] = this.houseNumber;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data; 
    }
}

export interface ISearchRiderDeliveryTaskResponse {
    id: string;
    orderId: string;
    deliveryStatus: DeliveryStatusEnum;
    name?: string | undefined;
    mobile?: string | undefined;
    avator?: string | undefined;
    simpleAddress?: string | undefined;
    fullAddress?: string | undefined;
    houseNumber?: string | undefined;
    latitude: number;
    longitude: number;
}

export class SearchRiderDeliveryTaskRequest extends QueryModel implements ISearchRiderDeliveryTaskRequest {

    constructor(data?: ISearchRiderDeliveryTaskRequest) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SearchRiderDeliveryTaskRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SearchRiderDeliveryTaskRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISearchRiderDeliveryTaskRequest extends IQueryModel {
}

export class ShoppingCartInfoResponse implements IShoppingCartInfoResponse {
    items?: ShoppingCartInfoItem[] | undefined;
    amount!: number;

    constructor(data?: IShoppingCartInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ShoppingCartInfoItem.fromJS(item));
            }
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): ShoppingCartInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ShoppingCartInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IShoppingCartInfoResponse {
    items?: ShoppingCartInfoItem[] | undefined;
    amount: number;
}

export class ShoppingCartInfoItem implements IShoppingCartInfoItem {
    id!: string;
    name?: string | undefined;
    imgUrl?: string | undefined;
    quantity!: number;
    price!: number;
    isSelected!: boolean;

    constructor(data?: IShoppingCartInfoItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imgUrl = _data["imgUrl"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): ShoppingCartInfoItem {
        data = typeof data === 'object' ? data : {};
        let result = new ShoppingCartInfoItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imgUrl"] = this.imgUrl;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface IShoppingCartInfoItem {
    id: string;
    name?: string | undefined;
    imgUrl?: string | undefined;
    quantity: number;
    price: number;
    isSelected: boolean;
}

export class ModifyShoppingCartItemRequest implements IModifyShoppingCartItemRequest {
    productId!: string;
    quantity?: number | undefined;
    isSelected?: boolean | undefined;

    constructor(data?: IModifyShoppingCartItemRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): ModifyShoppingCartItemRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ModifyShoppingCartItemRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface IModifyShoppingCartItemRequest {
    productId: string;
    quantity?: number | undefined;
    isSelected?: boolean | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}